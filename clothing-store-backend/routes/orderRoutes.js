const express = require("express");
const Order = require("../models/Order");
const Product = require("../models/Product");
const auth = require("../middleware/authMiddleware");
const checkAdmin = require("../middleware/checkAdmin");

const router = express.Router();

/**
 * ‚úÖ 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (üîí –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
 */
router.get("/", auth, checkAdmin, async (req, res) => {
  try {
    const orders = await Order.find();
    res.json(orders);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: " + error.message });
  }
});

/**
 * ‚úÖ 2. –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID (üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã)
 */
router.get("/:id", auth, async (req, res) => {
  try {
    const { id } = req.params;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID –∑–∞–∫–∞–∑–∞
    if (isNaN(id)) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞" });
    }

    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
    if (req.user.role !== "admin" && order.user_id.toString() !== req.user.userId) {
      return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
    }

    res.json(order);
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: " + error.message });
  }
});

/**
 * ‚úÖ 3. –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ (üîí –¢–æ–ª—å–∫–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
 */
router.post("/", auth, async (req, res) => {
  try {
    const { products, shipping_address, payment_method } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `products` - –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (product_id)
    if (!Array.isArray(products) || products.some(id => typeof id !== "number")) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç product_id" });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –ø–æ `product_id`
    const productDetails = await Product.find({ product_id: { $in: products } });

    if (productDetails.length !== products.length) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤
    const orderedProducts = productDetails.map(product => ({
      product_id: product.product_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º product_id, –∞ –Ω–µ _id
      name: product.name || "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
      price: product.price || 0,
      quantity: products.filter(id => id === product.product_id).length,
    }));

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    const total_price = orderedProducts.reduce((sum, product) => sum + product.price * product.quantity, 0);

    // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
    const order = new Order({
      user_id: req.user.userId,
      products: orderedProducts,
      total_price,
      status: "Pending",
      shipping_address,
      payment_method,
    });

    await order.save();
    res.status(201).json({ message: "–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω", order });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: " + error.message });
  }
});

/**
 * ‚úÖ 4. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (üîí –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
 */
router.put("/:id", auth, checkAdmin, async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;

    if (isNaN(id)) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞" });
    }

    const updatedOrder = await Order.findByIdAndUpdate(
      id,
      { status }, // ‚úÖ –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω
      { new: true }
    );

    if (!updatedOrder) {
      return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω", updatedOrder });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: " + error.message });
  }
});

/**
 * ‚úÖ 5. –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ (üîí –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
 */
router.delete("/:id", auth, checkAdmin, async (req, res) => {
  try {
    const { id } = req.params;

    if (isNaN(id)) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞" });
    }

    await Order.findByIdAndDelete(id);
    res.json({ message: "–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: " + error.message });
  }
});

module.exports = router;
