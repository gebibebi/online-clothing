const express = require("express");
const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const auth = require("../middleware/authMiddleware");

const router = express.Router();

// üî• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// üî• –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post("/register", async (req, res) => {
  try {
    const { first_name, last_name, email, password, role, gender, phone, address, registration_date } = req.body;

    console.log("üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:", email);

    if (!password) {
      return res.status(400).json({ message: "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!" });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      console.log("‚ùå Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è:", email);
      return res.status(400).json({ message: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
    }

    // üö® –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω –≤ –±–∞–∑–µ
    const adminExists = await User.findOne({ role: "admin" });

    // –ï—Å–ª–∏ –ø–æ–ª–µ "role" –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "user"
    let userRole = role || "user";

    // üö® –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –∞–¥–º–∏–Ω–∞
    if (userRole === "admin" && adminExists) {
      console.log("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      return res.status(403).json({ message: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" });
    }

    // ‚úÖ –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç–æ–π)
    console.log("üîç –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å:", password);
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    console.log("üîç –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:", hashedPassword);

    // ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏
    const user = new User({
      first_name,
      last_name,
      email,
      password: hashedPassword, // üëà –¢–µ–ø–µ—Ä—å —Ç–æ—á–Ω–æ —Ö–µ—à–∏—Ä—É–µ–º!
      role: userRole,
      gender: gender || null,
      phone: phone || null,
      address: address || {
        street: null,
        city: null,
        state: null,
        zip: null
      },
      registration_date: registration_date || new Date().toISOString().split("T")[0]
    });

    await user.save();
    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:", email);
    res.status(201).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", user });

  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + error.message });
  }
});


// üî• –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    console.log("üîπ –õ–æ–≥–∏–Ω:", email);

    const user = await User.findOne({ email });
    if (!user) {
      console.log("‚ùå User not found:", email);
      return res.status(401).json({ message: "Invalid credentials" });
    }

    console.log("‚úÖ User found:", user.email);
    console.log("üîç Stored hashed password:", user.password);
    console.log("üîç Entered password:", password);

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å —Å `bcrypt.compare`
    const isMatch = await bcrypt.compare(password, user.password);
    console.log("üîç Password match result:", isMatch);

    if (!isMatch) {
      console.log("‚ùå Password does not match for:", email);
      return res.status(401).json({ message: "Invalid credentials" });
    }

    console.log("‚úÖ Password matches!");

    // ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT-—Ç–æ–∫–µ–Ω
    const token = jwt.sign(
      { userId: user.id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({ token });

  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error.message);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: " + error.message });
  }
});

module.exports = router;
